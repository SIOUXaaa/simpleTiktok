// Code generated by hertz generator.

package publish

import (
	"context"
	"fmt"

	publish "simpleTiktok/biz/model/basic/publish"
	"simpleTiktok/biz/service"
	"simpleTiktok/pkg/errno"
	"simpleTiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, publish.DouyinPublishActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg: resp.StatusMsg,
		})
		return
	}

	err = service.NewPublishService(ctx, c).PublishAction(&req)
	fmt.Println("publish")
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, publish.DouyinPublishActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg: resp.StatusMsg,
		})
		return
	}
	c.JSON(consts.StatusOK, publish.DouyinPublishActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg: errno.SuccessMsg,
	})

}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(publish.DouyinPublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
